# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xcb\xad3:\x94\x02\xf6%rAX$\xfb\xdeQ\x9a'

_lr_action_items = {'RETURN': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 10, -75, -2, -5, -10, -14, -16, -17, -19, -15, 10, 10, -13, -12, -20, -18, -11, -3, -74, -9, 10, 10, -34, -33,
 10, -4, -32, -22, -21, -23, 10, -24, 10, 10, 10, 10, -35, -31, -25, -27, -29, -30, -76, 10, 10, -26, -28, ]),
                    'WHILE': (
                    [0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57,
                     58, 60, 82, 86, 87, 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151,
                     152, 153, ],
                    [-3, -75, 25, -75, -2, -5, -10, -14, -16, -17, -19, -15, 25, 25, -13, -12, -20, -18, -11, -3, -74,
                     -9, 25, 25, -34, -33, 25, -4, -32, -22, -21, -23, 25, -24, 25, 25, 25, 25, -35, -31, -25, -27, -29,
                     -30, -76, 25, 25, -26, -28, ]), 'PRINT': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 12, -75, -2, -5, -10, -14, -16, -17, -19, -15, 12, 12, -13, -12, -20, -18, -11, -3, -74, -9, 12, 12, -34, -33,
 12, -4, -32, -22, -21, -23, 12, -24, 12, 12, 12, 12, -35, -31, -25, -27, -29, -30, -76, 12, 12, -26, -28, ]), 'NEQ': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 83, 83, 83, 83, 83, 83, -67, -66, 83, 83, -54, None, 83, None,
 -53, -43, -45, -44, -46, 83, None, None, None, -47, None, 83, 83, -61, -62, 83, ]), 'LE': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 69, 69, 69, 69, 69, 69, -67, -66, 69, 69, -54, None, 69, None,
 -53, -43, -45, -44, -46, 69, None, None, None, -47, None, 69, 69, -61, -62, 69, ]), '%': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 81, 81, 81, 81, 81, 81, -67, -66, 81, 81, 81, 81, 81, 81, 81,
 81, -45, 81, -46, 81, 81, 81, 81, -47, 81, 81, 81, -61, -62, 81, ]), '&': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 70, 70, 70, 70, 70, 70, -67, -66, 70, 70, -54, -59, -49, -58,
 -53, -43, -45, -44, -46, 70, -55, -57, -60, -47, -56, 70, 70, -61, -62, 70, ]), ')': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 62, 64, 65, 66, 91, 92, 93, 94, 95, 100, 101, 102, 105, 106, 107, 108, 109,
 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 138, 140, 141, 147,
 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, -78, 105, 106, -71, 131, 132, -36, 133, 134, -77, 137, -80, -67,
 -66, -70, 140, 141, -73, -51, -54, -59, -49, -58, -53, -43, -45, -44, -46, -52, -55, -57, -60, -47, -56, -48, -50, -81,
 -61, -62, -79, -72, ]), '(': (
[10, 12, 23, 25, 34, 39, 44, 53, 54, 55, 59, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84,
 85, 88, 139, ],
[39, 39, 54, 55, 62, 39, 66, 39, 39, 39, 62, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
 39, 39, 39, ]), '+': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 73, 73, 73, 73, 73, 73, -67, -66, 73, 73, 73, 73, 73, 73, 73,
 -43, -45, -44, -46, 73, 73, 73, 73, -47, 73, 73, 73, -61, -62, 73, ]), '*': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 74, 74, 74, 74, 74, 74, -67, -66, 74, 74, 74, 74, 74, 74, 74,
 74, -45, 74, -46, 74, 74, 74, 74, -47, 74, 74, 74, -61, -62, 74, ]), '-': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 75, 75, 75, 75, 75, 75, -67, -66, 75, 75, 75, 75, 75, 75, 75,
 -43, -45, -44, -46, 75, 75, 75, 75, -47, 75, 75, 75, -61, -62, 75, ]), ',': (
[32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 98, 100, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115,
 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 138, 140, 141, 147, 149, ],
[-7, 61, -38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, -6, 136, -80, -8, -67, -66, 139, -73, -51, -54, -59,
 -49, -58, -53, -43, -45, -44, -46, -52, -55, -57, -60, -47, -56, -48, -50, -81, -61, -62, -79, -72, ]), '/': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 76, 76, 76, 76, 76, 76, -67, -66, 76, 76, 76, 76, 76, 76, 76,
 76, -45, 76, -46, 76, 76, 76, 76, -47, 76, 76, 76, -61, -62, 76, ]), 'ID': (
[0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 31, 39, 50, 51, 52, 53, 54, 55,
 56, 57, 58, 60, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
 96, 97, 103, 130, 131, 132, 133, 134, 135, 139, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 22, -75, -2, 34, -5, -10, 44, -14, 44, -16, -17, -19, -15, 22, 22, -13, -12, -20, -18, -11, -3, -74, 59, 44,
 -9, 22, 22, 44, 44, 44, -34, -33, 22, -4, 99, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, -32,
 44, 44, 44, -22, -21, 44, -23, 22, 99, 138, -24, 22, 22, 22, 22, -35, 44, -31, -25, -27, -29, -30, -76, 22, 22, -26,
 -28, ]), 'INTEGER': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, ]),
                    ';': (
                    [3, 26, 28, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 90, 93, 98, 104, 105,
                     106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
                     140, 141, ],
                    [8, 56, 57, -7, 60, -38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 82, 86, 87, 130, -36, -6,
                     -8, -67, -66, -51, -54, -59, -49, -58, -53, -43, -45, -44, -46, -52, -55, -57, -60, -47, -56, -48,
                     -50, 142, -61, -62, ]), ':': ([22, ], [52, ]), '=': ([22, 34, 99, ], [53, 63, 63, ]), '<': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 71, 71, 71, 71, 71, 71, -67, -66, 71, 71, -54, None, 71, None,
 -53, -43, -45, -44, -46, 71, None, None, None, -47, None, 71, 71, -61, -62, 71, ]), '$end': (
[1, 9, 11, 13, 14, 15, 16, 17, 19, 20, 21, 24, 27, 50, 56, 57, 82, 86, 87, 89, 130, 135, 142, 143, 144, 145, 146, 152,
 153, ],
[0, -10, -14, -16, -17, -19, -15, -1, -13, -12, -20, -18, -11, -9, -34, -33, -32, -22, -21, -23, -24, -35, -31, -25,
 -27, -29, -30, -26, -28, ]), 'SHR': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 68, 68, 68, 68, 68, 68, -67, -66, 68, 68, -54, 68, 68, 68, -53,
 -43, -45, -44, -46, 68, 68, 68, 68, -47, 68, 68, 68, -61, -62, 68, ]), 'REPEAT': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 18, -75, -2, -5, -10, -14, -16, -17, -19, -15, 18, 18, -13, -12, -20, -18, -11, -3, -74, -9, 18, 18, -34, -33,
 18, -4, -32, -22, -21, -23, 18, -24, 18, 18, 18, 18, -35, -31, -25, -27, -29, -30, -76, 18, 18, -26, -28, ]),
                    'STRING': (
                    [10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84,
                     85, 88, 139, ],
                    [37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
                     37, 37, 37, ]), 'ELSE': (
[11, 13, 14, 15, 16, 19, 20, 21, 24, 27, 56, 57, 82, 86, 87, 89, 130, 135, 142, 143, 144, 145, 146, 152, 153, ],
[-14, -16, -17, -19, -15, -13, -12, -20, -18, -11, -34, -33, -32, -22, -21, -23, -24, -35, -31, 150, 151, -29, -30, -26,
 -28, ]), 'GE': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 80, 80, 80, 80, 80, 80, -67, -66, 80, 80, -54, None, 80, None,
 -53, -43, -45, -44, -46, 80, None, None, None, -47, None, 80, 80, -61, -62, 80, ]), 'EQ': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 78, 78, 78, 78, 78, 78, -67, -66, 78, 78, -54, None, 78, None,
 -53, -43, -45, -44, -46, 78, None, None, None, -47, None, 78, 78, -61, -62, 78, ]), 'UNTIL': (
[9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 27, 50, 51, 56, 57, 82, 86, 87, 89, 130, 135, 142, 143, 144, 145, 146, 152,
 153, ],
[-10, -14, -16, -17, -19, -15, -13, -12, -20, -18, -11, -9, 88, -34, -33, -32, -22, -21, -23, -24, -35, -31, -25, -27,
 -29, -30, -26, -28, ]), 'IF': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 23, -75, -2, -5, -10, -14, -16, -17, -19, -15, 23, 23, -13, -12, -20, -18, -11, -3, -74, -9, 23, 23, -34, -33,
 23, -4, -32, -22, -21, -23, 23, -24, 23, 23, 23, 23, -35, -31, -25, -27, -29, -30, -76, 23, 23, -26, -28, ]), 'AND': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 67, 67, 67, 67, 67, 67, -67, -66, 67, -51, -54, -59, -49, -58,
 -53, -43, -45, -44, -46, 67, -55, -57, -60, -47, -56, -48, -50, -61, -62, 67, ]), 'SHL': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 72, 72, 72, 72, 72, 72, -67, -66, 72, 72, -54, 72, 72, 72, -53,
 -43, -45, -44, -46, 72, 72, 72, 72, -47, 72, 72, 72, -61, -62, 72, ]), 'TYPE': (
[0, 2, 5, 6, 8, 29, 58, 60, 62, 135, 136, 148, ], [-3, 7, 31, -2, -5, -3, 97, -4, 103, -35, 103, -76, ]), 'FLOAT': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, ]),
                    '^': (
                    [35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113,
                     114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
                    [-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 85, 85, 85, 85, 85, 85, -67, -66, 85, 85,
                     -54, -59, -49, -58, -53, -43, -45, -44, -46, 85, -55, -57, -60, -47, -56, 85, -50, -61, -62,
                     85, ]), '|': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 84, 84, 84, 84, 84, 84, -67, -66, 84, 84, -54, -59, -49, -58,
 -53, -43, -45, -44, -46, 84, -55, -57, -60, -47, -56, -48, -50, -61, -62, 84, ]), 'BREAK': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 26, -75, -2, -5, -10, -14, -16, -17, -19, -15, 26, 26, -13, -12, -20, -18, -11, -3, -74, -9, 26, 26, -34, -33,
 26, -4, -32, -22, -21, -23, 26, -24, 26, 26, 26, 26, -35, -31, -25, -27, -29, -30, -76, 26, 26, -26, -28, ]),
                    'CONTINUE': (
                    [0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57,
                     58, 60, 82, 86, 87, 89, 96, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 148, 150, 151,
                     152, 153, ],
                    [-3, -75, 28, -75, -2, -5, -10, -14, -16, -17, -19, -15, 28, 28, -13, -12, -20, -18, -11, -3, -74,
                     -9, 28, 28, -34, -33, 28, -4, -32, -22, -21, -23, 28, -24, 28, 28, 28, 28, -35, -31, -25, -27, -29,
                     -30, -76, 28, 28, -26, -28, ]), 'error': (
[0, 2, 6, 8, 12, 29, 39, 54, 55, 58, 60, 66, ], [-3, 3, -2, -5, 48, -3, 64, 92, 95, 3, -4, 109, ]), '{': (
[0, 2, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 29, 30, 50, 51, 52, 56, 57, 58, 60, 82, 86, 87,
 89, 96, 130, 131, 132, 133, 134, 135, 137, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, ],
[-3, -75, 29, -75, -2, -5, -10, -14, -16, -17, -19, -15, 29, 29, -13, -12, -20, -18, -11, -3, -74, -9, 29, 29, -34, -33,
 29, -4, -32, -22, -21, -23, 29, -24, 29, 29, 29, 29, -35, 29, -31, -25, -27, -29, -30, -76, 29, 29, -26, -28, ]),
                    '>': (
                    [35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113,
                     114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
                    [-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 79, 79, 79, 79, 79, 79, -67, -66, 79, 79,
                     -54, None, 79, None, -53, -43, -45, -44, -46, 79, None, None, None, -47, None, 79, 79, -61, -62,
                     79, ]), '}': (
[9, 11, 13, 14, 15, 16, 19, 20, 21, 24, 27, 50, 56, 57, 82, 86, 87, 89, 96, 130, 135, 142, 143, 144, 145, 146, 152,
 153, ],
[-10, -14, -16, -17, -19, -15, -13, -12, -20, -18, -11, -9, -34, -33, -32, -22, -21, -23, 135, -24, -35, -31, -25, -27,
 -29, -30, -26, -28, ]), 'OR': (
[35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 65, 90, 93, 104, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117,
 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 140, 141, 149, ],
[-38, -68, -42, -63, -64, -40, -39, -37, -69, -65, -41, 77, 77, 77, 77, 77, 77, -67, -66, 77, -51, -54, -59, -49, -58,
 -53, -43, -45, -44, -46, -52, -55, -57, -60, -47, -56, -48, -50, -61, -62, 77, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declarations': ([0, 29, ], [2, 58, ]), 'expr_list': ([66, ], [107, ]), 'float': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, ]),
                  'funcall': (
                  [10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84,
                   85, 88, 139, ],
                  [36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                   36, 36, 36, ]), 'choice_instr': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, ]),
                  'arg': ([62, 136, ], [102, 147, ]), 'binary_expression': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, ]),
                  'repeat_instr': ([4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ],
                                   [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ]), 'return_instr': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, ]),
                  'const': (
                  [10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84,
                   85, 88, 139, ],
                  [38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
                   38, 38, 38, ]), 'continue_instr': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, ]),
                  'while_instr': ([4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ],
                                  [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, ]),
                  'init': ([7, 61, 97, ], [32, 98, 32, ]), 'program': ([0, ], [1, ]), 'string': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, ]),
                  'assignment': ([4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ],
                                 [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, ]),
                  'fundefs': ([2, 5, ], [4, 30, ]), 'labeled_instr': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, ]),
                  'compound_instr': ([4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 137, 150, 151, ],
                                     [21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 148, 21, 21, ]),
                  'inits': ([7, 97, ], [33, 33, ]), 'declaration': ([2, 58, ], [6, 6, ]), 'integer': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, ]),
                  'args_list': ([62, ], [100, ]), 'condition': ([54, 55, 88, ], [91, 94, 129, ]),
                  'instructions': ([4, 18, 58, ], [17, 51, 96, ]), 'expr_list_or_empty': ([66, ], [108, ]), 'name': (
[10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 88, 139, ],
[40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, ]),
                  'break_instr': ([4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ],
                                  [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, ]), 'instruction': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [9, 50, 9, 50, 89, 9, 50, 143, 144, 145, 146, 152, 153, ]),
                  'args_list_or_empty': ([62, ], [101, ]), 'fundef': ([2, 5, ], [5, 5, ]), 'print_instr': (
[4, 17, 18, 51, 52, 58, 96, 131, 132, 133, 134, 150, 151, ], [27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, ]),
                  'expression': (
                  [10, 12, 39, 53, 54, 55, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84,
                   85, 88, 139, ],
                  [47, 49, 65, 90, 93, 93, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
                   124, 125, 126, 127, 128, 93, 149, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    ('program -> declarations fundefs instructions', 'program', 3, 'p_program',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 40),
    ('declarations -> declarations declaration', 'declarations', 2, 'p_declarations',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 44),
    ('declarations -> <empty>', 'declarations', 0, 'p_declarations', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 45),
    ('declaration -> TYPE inits ;', 'declaration', 3, 'p_declaration', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 53),
    ('declaration -> error ;', 'declaration', 2, 'p_declaration', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 54),
    ('inits -> inits , init', 'inits', 3, 'p_inits', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 58),
    ('inits -> init', 'inits', 1, 'p_inits', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 59),
    ('init -> ID = expression', 'init', 3, 'p_init', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 66),
    ('instructions -> instructions instruction', 'instructions', 2, 'p_instructions',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 71),
    (
    'instructions -> instruction', 'instructions', 1, 'p_instructions', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 72),
    ('instruction -> print_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 79),
    ('instruction -> labeled_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 80),
    ('instruction -> assignment', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 81),
    ('instruction -> choice_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 82),
    ('instruction -> while_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 83),
    ('instruction -> repeat_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 84),
    ('instruction -> return_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 85),
    ('instruction -> break_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 86),
    (
    'instruction -> continue_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 87),
    (
    'instruction -> compound_instr', 'instruction', 1, 'p_instruction', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 88),
    ('print_instr -> PRINT expression ;', 'print_instr', 3, 'p_print_instr', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py',
     92),
    ('print_instr -> PRINT error ;', 'print_instr', 3, 'p_print_instr', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 93),
    ('labeled_instr -> ID : instruction', 'labeled_instr', 3, 'p_labeled_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 97),
    ('assignment -> ID = expression ;', 'assignment', 4, 'p_assignment', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py',
     101),
    ('choice_instr -> IF ( condition ) instruction', 'choice_instr', 5, 'p_choice_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 105),
    ('choice_instr -> IF ( condition ) instruction ELSE instruction', 'choice_instr', 7, 'p_choice_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 106),
    ('choice_instr -> IF ( error ) instruction', 'choice_instr', 5, 'p_choice_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 107),
    ('choice_instr -> IF ( error ) instruction ELSE instruction', 'choice_instr', 7, 'p_choice_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 108),
    ('while_instr -> WHILE ( condition ) instruction', 'while_instr', 5, 'p_while_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 116),
    ('while_instr -> WHILE ( error ) instruction', 'while_instr', 5, 'p_while_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 117),
    ('repeat_instr -> REPEAT instructions UNTIL condition ;', 'repeat_instr', 5, 'p_repeat_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 121),
    ('return_instr -> RETURN expression ;', 'return_instr', 3, 'p_return_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 125),
    (
    'continue_instr -> CONTINUE ;', 'continue_instr', 2, 'p_continue_instr', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py',
    129),
    ('break_instr -> BREAK ;', 'break_instr', 2, 'p_break_instr', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 133),
    ('compound_instr -> { declarations instructions }', 'compound_instr', 4, 'p_compound_instr',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 137),
    ('condition -> expression', 'condition', 1, 'p_condition', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 141),
    ('const -> integer', 'const', 1, 'p_const', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 145),
    ('const -> float', 'const', 1, 'p_const', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 146),
    ('const -> string', 'const', 1, 'p_const', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 147),
    ('integer -> INTEGER', 'integer', 1, 'p_integer', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 151),
    ('float -> FLOAT', 'float', 1, 'p_float', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 155),
    ('string -> STRING', 'string', 1, 'p_string', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 159),
    ('binary_expression -> expression + expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 163),
    ('binary_expression -> expression - expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 164),
    ('binary_expression -> expression * expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 165),
    ('binary_expression -> expression / expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 166),
    ('binary_expression -> expression % expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 167),
    ('binary_expression -> expression | expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 168),
    ('binary_expression -> expression & expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 169),
    ('binary_expression -> expression ^ expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 170),
    ('binary_expression -> expression AND expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 171),
    ('binary_expression -> expression OR expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 172),
    ('binary_expression -> expression SHL expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 173),
    ('binary_expression -> expression SHR expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 174),
    ('binary_expression -> expression EQ expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 175),
    ('binary_expression -> expression NEQ expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 176),
    ('binary_expression -> expression > expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 177),
    ('binary_expression -> expression < expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 178),
    ('binary_expression -> expression LE expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 179),
    ('binary_expression -> expression GE expression', 'binary_expression', 3, 'p_binary_expression',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 180),
    (
    'funcall -> ID ( expr_list_or_empty )', 'funcall', 4, 'p_funcall', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 184),
    ('funcall -> ID ( error )', 'funcall', 4, 'p_funcall', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 185),
    ('expression -> const', 'expression', 1, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 189),
    ('expression -> name', 'expression', 1, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 190),
    ('expression -> binary_expression', 'expression', 1, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py',
     191),
    ('expression -> ( expression )', 'expression', 3, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 192),
    ('expression -> ( error )', 'expression', 3, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 193),
    ('expression -> funcall', 'expression', 1, 'p_expression', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 194),
    ('name -> ID', 'name', 1, 'p_name', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 201),
    ('expr_list_or_empty -> expr_list', 'expr_list_or_empty', 1, 'p_expr_list_or_empty',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 205),
    ('expr_list_or_empty -> <empty>', 'expr_list_or_empty', 0, 'p_expr_list_or_empty',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 206),
    ('expr_list -> expr_list , expression', 'expr_list', 3, 'p_expr_list', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py',
     214),
    ('expr_list -> expression', 'expr_list', 1, 'p_expr_list', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 215),
    ('fundefs -> fundef fundefs', 'fundefs', 2, 'p_fundefs', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 222),
    ('fundefs -> <empty>', 'fundefs', 0, 'p_fundefs', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 223),
    ('fundef -> TYPE ID ( args_list_or_empty ) compound_instr', 'fundef', 6, 'p_fundef',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 230),
    ('args_list_or_empty -> args_list', 'args_list_or_empty', 1, 'p_args_list_or_empty',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 234),
    ('args_list_or_empty -> <empty>', 'args_list_or_empty', 0, 'p_args_list_or_empty',
     'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 235),
    ('args_list -> args_list , arg', 'args_list', 3, 'p_args_list', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 242),
    ('args_list -> arg', 'args_list', 1, 'p_args_list', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 243),
    ('arg -> TYPE ID', 'arg', 2, 'p_arg', 'C:\\Users\\Wilk\\Kompilatory\\Cparser.py', 250),
]
